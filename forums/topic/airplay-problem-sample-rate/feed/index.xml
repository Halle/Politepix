<?xml version="1.0" encoding="UTF-8"?>
	<rss version="2.0"
		xmlns:content="http://purl.org/rss/1.0/modules/content/"
		xmlns:wfw="http://wellformedweb.org/CommentAPI/"
		xmlns:dc="http://purl.org/dc/elements/1.1/"
		xmlns:atom="http://www.w3.org/2005/Atom"

			>

	<channel>

		<title>AirPlay problem, sample rate? &#8211; Politepix</title>
		<atom:link href="/forums/topic/airplay-problem-sample-rate/feed/" rel="self" type="application/rss+xml" />
		<link>/forums/topic/airplay-problem-sample-rate/feed/</link>
		<description></description>
		<lastBuildDate>Tue, 23 Apr 2024 14:54:51 +0000</lastBuildDate>
		<generator>https://bbpress.org/?v=2.6.9</generator>
		<language>en-US</language>

		
														
					
				<item>
					<guid>/forums/topic/airplay-problem-sample-rate/#post-1017012</guid>
					<title><![CDATA[AirPlay problem, sample rate?]]></title>
					<link>/forums/topic/airplay-problem-sample-rate/#post-1017012</link>
					<pubDate>Sat, 20 Apr 2013 19:01:46 +0000</pubDate>
					<dc:creator>ransomweaver</dc:creator>

					<description>
						<![CDATA[
						<p>Hello,</p>
<p>My app is using OpenEars to create WAV files that are stored and played back later. My playback system uses MPMusicPlayerController to play iPod music, and an OpenAL soundengine to play my custom wav files, with the app ducking the volume on the music, pausing the player, playing the wav files, then restarting the music. The OpenAL soundengine uses kAudioSessionCategory_MediaPlayback in order to play sounds in the background.</p>
<p>All this works well, except when sending the audio over AirPlay. The music sounds fine, but the OpenEars generated wav files are horribly degraded.</p>
<p>My feeling here is the problem is the sample rate mismatch between the 44.1khz music and the 16khz tts file.  Even more damning, my app used to use wav files generated by Festival text2wave and downloaded from a server, and those files I made at 44.1 and worked fine with airplay.</p>
<p>So my question is: can I change Flite to create 44.1khz speech? I see in RuntimeValues.m there is input_sample_rate = 16000. I haven&#8217;t tried it changed to 44100, but I&#8217;m suspicious that it wouldn&#8217;t work and that only 8k and 16k are supported in flite.</p>
<p>Alternatively, does anyone know of a method to just upsample a 16k wav to 44.1? If It can at least not degrade the sample I&#8217;d be satisfied with that.</p>
						]]>
					</description>

					
					
				</item>

			
				<item>
					<guid>/forums/topic/airplay-problem-sample-rate/#post-1017013</guid>
					<title><![CDATA[Reply To: AirPlay problem, sample rate?]]></title>
					<link>/forums/topic/airplay-problem-sample-rate/#post-1017013</link>
					<pubDate>Sat, 20 Apr 2013 19:10:42 +0000</pubDate>
					<dc:creator>Halle Winkler</dc:creator>

					<description>
						<![CDATA[
						<p>Welcome,</p>
<p>You definitely can&#8217;t change the output rate of the Flite speech. The runtime value you&#8217;re referencing is for Pocketsphinx, unfortunately, and it is for yet-unreleased features.</p>
						]]>
					</description>

					
					
				</item>

			
				<item>
					<guid>/forums/topic/airplay-problem-sample-rate/#post-1017014</guid>
					<title><![CDATA[Reply To: AirPlay problem, sample rate?]]></title>
					<link>/forums/topic/airplay-problem-sample-rate/#post-1017014</link>
					<pubDate>Sat, 20 Apr 2013 20:13:28 +0000</pubDate>
					<dc:creator>ransomweaver</dc:creator>

					<description>
						<![CDATA[
						<p>Hi,</p>
<p>Thought as much. Actually I am doing an amplification of the file (using a method from a stack overflow thread you directed me to some time ago. In that method (which uses ExtAudioFile api) it reads a wav file, including the sample rate, then sets a AudioStreamBasicDescription object with the sample rate to indicate the format for the returned samples.  If I set that to 44100, the audio will actually sound fine on Airplay BUT the file is not complete; there is less than 1/2 the audio.</p>
<p>i wonder if I could add in an interpolation into this method to raise the samples up to the number that should be in a 44.1khz file.</p>
<p>Here&#8217;s the full method. Probably it involves doing this in the loop over the buffers. Any thoughts?</p>
<p>&lt;code&gt;</p>
<p>void ScaleAudioFileAmplitude(NSURL *theURL, float ampScale) {</p>
<p>OSStatus err = noErr;</p>
<p>ExtAudioFileRef audiofile;</p>
<p>ExtAudioFileOpenURL((CFURLRef)theURL, &amp;audiofile);</p>
<p>assert(audiofile);</p>
<p>// get some info about the file&#8217;s format.</p>
<p>AudioStreamBasicDescription fileFormat;</p>
<p>UInt32 size = sizeof(fileFormat);</p>
<p>err = ExtAudioFileGetProperty(audiofile, kExtAudioFileProperty_FileDataFormat, &amp;size, &amp;fileFormat);</p>
<p>// we&#8217;ll need to know what type of file it is later when we write</p>
<p>AudioFileID aFile;</p>
<p>size = sizeof(aFile);</p>
<p>err = ExtAudioFileGetProperty(audiofile, kExtAudioFileProperty_AudioFile, &amp;size, &amp;aFile);</p>
<p>AudioFileTypeID fileType;</p>
<p>size = sizeof(fileType);</p>
<p>err = AudioFileGetProperty(aFile, kAudioFilePropertyFileFormat, &amp;size, &amp;fileType);</p>
<p>// tell the ExtAudioFile API what format we want samples back in</p>
<p>AudioStreamBasicDescription clientFormat;</p>
<p>bzero(&amp;clientFormat, sizeof(clientFormat));</p>
<p>clientFormat.mChannelsPerFrame = fileFormat.mChannelsPerFrame;</p>
<p>clientFormat.mBytesPerFrame = 4;</p>
<p>clientFormat.mBytesPerPacket = clientFormat.mBytesPerFrame;</p>
<p>clientFormat.mFramesPerPacket = 1;</p>
<p>clientFormat.mBitsPerChannel = 32;</p>
<p>clientFormat.mFormatID = kAudioFormatLinearPCM;</p>
<p>clientFormat.mSampleRate = fileFormat.mSampleRate;</p>
<p>NSLog(@&#8221;Sample Rate is %1.2f&#8221;,clientFormat.mSampleRate);</p>
<p>clientFormat.mFormatFlags = kLinearPCMFormatFlagIsFloat | kAudioFormatFlagIsNonInterleaved;</p>
<p>err = ExtAudioFileSetProperty(audiofile, kExtAudioFileProperty_ClientDataFormat, sizeof(clientFormat), &amp;clientFormat);</p>
<p>// find out how many frames we need to read</p>
<p>SInt64 numFrames = 0;</p>
<p>size = sizeof(numFrames);</p>
<p>err = ExtAudioFileGetProperty(audiofile, kExtAudioFileProperty_FileLengthFrames, &amp;size, &amp;numFrames);</p>
<p>// create the buffers for reading in data</p>
<p>AudioBufferList *bufferList = malloc(sizeof(AudioBufferList) + sizeof(AudioBuffer) * (clientFormat.mChannelsPerFrame &#8211; 1));</p>
<p>bufferList-&gt;mNumberBuffers = clientFormat.mChannelsPerFrame;</p>
<p>for (int ii=0; ii &lt; bufferList-&gt;mNumberBuffers; ++ii) {</p>
<p>bufferList-&gt;mBuffers[ii].mDataByteSize = sizeof(float) * numFrames;</p>
<p>bufferList-&gt;mBuffers[ii].mNumberChannels = 1;</p>
<p>bufferList-&gt;mBuffers[ii].mData = malloc(bufferList-&gt;mBuffers[ii].mDataByteSize);</p>
<p>}</p>
<p>// read in the data</p>
<p>UInt32 rFrames = (UInt32)numFrames;</p>
<p>err = ExtAudioFileRead(audiofile, &amp;rFrames, bufferList);</p>
<p>// close the file</p>
<p>err = ExtAudioFileDispose(audiofile);</p>
<p>// process the audio</p>
<p>for (int ii=0; ii &lt; bufferList-&gt;mNumberBuffers; ++ii) {</p>
<p>float *fBuf = (float *)bufferList-&gt;mBuffers[ii].mData;</p>
<p>for (int jj=0; jj &lt; rFrames; ++jj) {</p>
<p>*fBuf = *fBuf * ampScale;</p>
<p>fBuf++;</p>
<p>}</p>
<p>}</p>
<p>// open the file for writing</p>
<p>err = ExtAudioFileCreateWithURL((CFURLRef)theURL, fileType, &amp;fileFormat, NULL, kAudioFileFlags_EraseFile, &amp;audiofile);</p>
<p>// tell the ExtAudioFile API what format we&#8217;ll be sending samples in</p>
<p>err = ExtAudioFileSetProperty(audiofile, kExtAudioFileProperty_ClientDataFormat, sizeof(clientFormat), &amp;clientFormat);</p>
<p>// write the data</p>
<p>err = ExtAudioFileWrite(audiofile, rFrames, bufferList);</p>
<p>// close the file</p>
<p>ExtAudioFileDispose(audiofile);</p>
<p>// destroy the buffers</p>
<p>for (int ii=0; ii &lt; bufferList-&gt;mNumberBuffers; ++ii) {</p>
<p>free(bufferList-&gt;mBuffers[ii].mData);</p>
<p>}</p>
<p>free(bufferList);</p>
<p>bufferList = NULL;</p>
<p>}</p>
<p>&lt;/code&gt;</p>
<p>&nbsp;</p>
						]]>
					</description>

					
					
				</item>

			
				<item>
					<guid>/forums/topic/airplay-problem-sample-rate/#post-1017015</guid>
					<title><![CDATA[Reply To: AirPlay problem, sample rate?]]></title>
					<link>/forums/topic/airplay-problem-sample-rate/#post-1017015</link>
					<pubDate>Sat, 20 Apr 2013 20:29:48 +0000</pubDate>
					<dc:creator>Halle Winkler</dc:creator>

					<description>
						<![CDATA[
						<p>I don&#8217;t have advice on this off the top of my head, but interpolating 16kHz to 44.1kHz is the kind of requirement that would probably make me wonder if the situation had become overly complicated in general. Maybe there&#8217;s something simpler than combining all of those different technologies?</p>
						]]>
					</description>

					
					
				</item>

			
				<item>
					<guid>/forums/topic/airplay-problem-sample-rate/#post-1017016</guid>
					<title><![CDATA[Reply To: AirPlay problem, sample rate?]]></title>
					<link>/forums/topic/airplay-problem-sample-rate/#post-1017016</link>
					<pubDate>Sat, 20 Apr 2013 20:30:44 +0000</pubDate>
					<dc:creator>ransomweaver</dc:creator>

					<description>
						<![CDATA[
						<p>No doubt I could use one of these:</p>
<p><a href="http://www.mega-nerd.com/SRC/api.html" rel="nofollow">http://www.mega-nerd.com/SRC/api.html</a></p>
<p><a href="https://github.com/timmartin/libfooid/tree/master/libresample" rel="nofollow">https://github.com/timmartin/libfooid/tree/master/libresample</a></p>
						]]>
					</description>

					
					
				</item>

			
				<item>
					<guid>/forums/topic/airplay-problem-sample-rate/#post-1017017</guid>
					<title><![CDATA[Reply To: AirPlay problem, sample rate?]]></title>
					<link>/forums/topic/airplay-problem-sample-rate/#post-1017017</link>
					<pubDate>Sat, 20 Apr 2013 20:35:09 +0000</pubDate>
					<dc:creator>ransomweaver</dc:creator>

					<description>
						<![CDATA[
						<p>Well, I have two basic requirements;</p>
<p>1) the app can play iPod music</p>
<p>2) the app can play iPod music and the app&#8217;s own wav files in the background.</p>
<p>And the only problem I have right now is that AirPlay doesn&#8217;t like an audio stream with 44.1 and 16k audio in it at the same time.</p>
<p>I&#8217;m not sure how I would go about fixing that, even with a completely different way of playing audio files, without changing the hertz of one or the other of the kinds of files I&#8217;m playing.</p>
						]]>
					</description>

					
					
				</item>

			
				<item>
					<guid>/forums/topic/airplay-problem-sample-rate/#post-1017018</guid>
					<title><![CDATA[Reply To: AirPlay problem, sample rate?]]></title>
					<link>/forums/topic/airplay-problem-sample-rate/#post-1017018</link>
					<pubDate>Sat, 20 Apr 2013 20:40:39 +0000</pubDate>
					<dc:creator>Halle Winkler</dc:creator>

					<description>
						<![CDATA[
						<p>I guess I&#8217;d be curious about what AirPlay does when it gets songs with different sampling rates, since it&#8217;s normal for both 44.1k and 48k to be found in audio libraries.</p>
						]]>
					</description>

					
					
				</item>

			
				<item>
					<guid>/forums/topic/airplay-problem-sample-rate/#post-1017019</guid>
					<title><![CDATA[Reply To: AirPlay problem, sample rate?]]></title>
					<link>/forums/topic/airplay-problem-sample-rate/#post-1017019</link>
					<pubDate>Sat, 20 Apr 2013 20:42:23 +0000</pubDate>
					<dc:creator>ransomweaver</dc:creator>

					<description>
						<![CDATA[
						<p>I will look into that. Maybe the problem is my kind of audio session (mediaPlayback) but i need that to keep it alive in the background.</p>
						]]>
					</description>

					
					
				</item>

			
				<item>
					<guid>/forums/topic/airplay-problem-sample-rate/#post-1017020</guid>
					<title><![CDATA[Reply To: AirPlay problem, sample rate?]]></title>
					<link>/forums/topic/airplay-problem-sample-rate/#post-1017020</link>
					<pubDate>Sat, 20 Apr 2013 20:53:19 +0000</pubDate>
					<dc:creator>Halle Winkler</dc:creator>

					<description>
						<![CDATA[
						<p>My instinct is that nothing should really be objecting to sample rate changes per se, since the whole deal with playing back a formatted file rather than a buffer stream is that the required data is encapsulated by the header so that a qualified player can deal with differences in file details such as sample rate, maybe bitrate, endianness, codec, whatever. This will also be true of other mediaplayer type objects such as videos. So I might be suspicious of other implementation details besides the sample rates of the files played.</p>
<p>I don&#8217;t really have insight into what this particular issue is and you might be 100% right that the most direct fix is to change the sample rate, I&#8217;m just sharing what my thought process on it would be if it were my implementation to debug.</p>
						]]>
					</description>

					
					
				</item>

			
				<item>
					<guid>/forums/topic/airplay-problem-sample-rate/#post-1017021</guid>
					<title><![CDATA[Reply To: AirPlay problem, sample rate?]]></title>
					<link>/forums/topic/airplay-problem-sample-rate/#post-1017021</link>
					<pubDate>Sat, 20 Apr 2013 21:13:34 +0000</pubDate>
					<dc:creator>Halle Winkler</dc:creator>

					<description>
						<![CDATA[
						<p>Oh, and here&#8217;s a hint that just occurred to me: remember that you have control of the voice&#8217;s speed and pitch, so you can use naive methods of sample rate changing that change perceived speed and pitch and then compensate for it in the original voice settings, to a certain extent at least. That might get you as far as successfully resampling to a rate that fits into 44.1 better than 16k.</p>
						]]>
					</description>

					
					
				</item>

					
		
	</channel>
	</rss>

